¿Qué es backend?
    Tomando como base un modelo cliente-servidor.
    Se suele usar el término 'backend' para referirse a software ejecutado en el servidor.
    Se puede expandir más allá de la arquitectura cliente-servidor, y convertirse en un sistema
    distribuido.

¿Qué son los sistemas distribuidos?
    1) Sistema monolítico
        Es un sistema conformado por una sola "pieza" en el que se ejecuta todo".
        Un único servidor que hospeda uno o más sitios con LAMP (Linux Apache MySQL PHP) stack.
        Se ejecuta en un solo servidor.
    2) Sistema distribuido
        Compuesto de múltiples componentes (servidores) que se comunican entre sí usando redes.
        Aunque sabemos que es un sistema conformado por muchos componentes conectados por medio de
        redes (pueden estar en múltuples redes), puede manifestarse en diferentes escalas e implementar múltiples
        patrones de arquitectura.

Elementos en los sistemas distribuidos
    1) Load Balancers.
    2) VMs.
    3) Base de datos (relacionales y no relacionales).
    4) Queues (SQS).
    5) Storage (S3).
    6) Servicios Publisher-Subscriber (SNS): Enviar notificaciones a los subscriptores.
    7) Pipelines.
    8) etc.

Cómo se conecta todo en el backend
    Para poner conectar un backend, generalmente se exponen API (interfaces que permite que distintos servicios puedan
    comunicarse entre sí). Permiten acceso a cierta funcionalidad hacía otros componentes del sistema distribuido.

¿Qué es un docucmento de diseño?
    Contiene todos los detalles que se necesitan para construir el programa.
    Es agnóstico a lenguajes de programación y proovedores de servicio.

    Se puede poner un índice.
        a) Hay que agregar Definiciones y acrónimos. Dar todo el detalle y definiciones para poder entender el documento.
        b) Limitaciones y desconocimiento.
        c) Casos de uso soportados y fuera de alcance.
        d) Propuesta: Va detallada la arquitectura.

Creación de los casos de uso (design-doc.md)
    Se recomienda empezar por los casos de uso, ya que son estictamente lo que va a soportar.

    a) Diagramas: Poner diagramas de secuencia, UML, etc.
    b) Modelo de datos: Poner diseño de entidades, JSONs, tablas, diagramas entidad-relación, etc.
    c) Limitaciones: Lista de limitaciones conocidas. Puede ser en formato de lista. Tienen que ir en un formato
    que sea cuantificable.
    d) Costo: Descripción/Análisis de costos

Revisión del documento de diseño
    a) ¿Por qué se hace esto?
    b) Proponer cambios para una segunda iteración.
    c) Hay que tener en cuenta la infraestructura.
    d) Tener más de una alternativa.

Elaboración de la arquitectura del sistema
    Plasmar estos componentes del sistema distribuido en un boceto.

Diseño de bajo nivel, planes de prueba e integración continua
    Se detalla la forma en la que se implementa el diseño hecho. Se contempla cómo se va a utilizar y las
    tecnologías en las que se va a desarrollar.
    No hace falta que se hacer un diseño de todo el sistema global.

Plan de integración continua
    No es solamente como se va a estar integrado ese fixture hasta PROD, sino engloba también el rollout (se tiene una
    funcionalidad, y se hace el esquema de feature para que la implementación llegue hasta los clientes de todos los usuarios).
    A medida que el sistema escala, las pipelines se tienen que ir detallando más a fondo.

    Pipelines: Pasos a seguir.
    Rollout: Distribuir de manera escalonada a producción.

    Etapas
        DEV
        TEST
        PROD
    Lo está en master, no tiene que ser necesariamente lo que va a ver el usuario final.
    Los ambientes puede estar atado a un stage específico.
    Se recomienda el uso de tag para hacer el control de las versiones del código en paralelo.
    PROD puede tener varias etapas. Al distribuirlo por partes, se evitan que se filten bugs a gran escala.

