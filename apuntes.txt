Web Developer Fundamentals
    Frontend
        Desarrollo del lado del client.
            1) HTML
            2) CSS
                a) Frameworks
                b) Preprocesadores
            3) Javascript
                a) Frameworks
                b) Librerías
                c) Compilador (Babel)
                d) Empaquetador (Webpack)

    Backend
        Desarrollo del lado del server. No tiene un standard definido.
            1) Server
            2) Intraestructura
            3) Base de datos

    Páginas dinámicas
        Se las conoce también como webapps.
        Sí están conectadas a una base de datos (se genera interacción, por lo que tiene estado).

    Páginas estáticas
        Todos los productos que tengan recursos para consumir, pero son inmutables (no se le hacen cambios).
        Se las conocen como páginas informaticas (landing pages).
        No están conectadas a un servidor o una base de datos.

HTML (Hypertext Markup Language)
    Anatomía del HTML
        Container
            Header
                Logo
                Navigation

            Main
                Section
                Article
            Sidebar
                Aside
            Footer

Tipos de imágenes
    Depende del formato para determinar el tipo de imagen.
        1) Lossy (con pérdida): Son formatos de imagen con pérdida, se aproximan a su imagen original. Por ejemplo,
        una imagen con pérdida podría reducir la cantidad de colores en su imagen o analizarla en busca de datos innecesarios.
        Esto reducirá el tamaño del archivo, aunque puede reducir la calidad. Mejora el tiempo de carga. Son ideales para usar en
        línea, dónde el tamaño del archivo y la velocidad de descarga son vitales.
            1) JPG/JPEG (Photographic Experts Group): Este formato se utiliza para fotografía. Maneja una gama de colores ilimitada.
        2) Lossless (sin pérdidas): Capturan todos los datos de su archivo original (no se pierde nada del archivo
        original. No suelen perder calidad. Son pesadas). El archivo puede estar comprimido, pero todos los formatos sin perdida podrán reconstruir su imagem
        a su estado original.
            1) GIF (Graphics Interchange Format): Ocupa una gama de 256 colores y no se pueden hacer más ligeras.
            2) PNG 8 (Portable Network Graphics): Formato de imagen que tiene un uso de colores de 256. Casi siempre se ocupan
            para imágenes o logotipos que puedan usar una transparencia. Se se comprime, no pierde calidad.
            3) PNG 24: Tiene un uso de colores ilimitado.
            4) SVG (Scalable Vector Graphics): Se lo conoce como formato "vector". Formato ligero que se utiliza para logotipos
            o imágenes hechas para escalar. Se recomienda para trabajar en distintas resoluciones.

Optimizar imágenes
    En promedio, una imagen no tiene que pesar más de 70kb.
        -Tiny PNG: Redimensiona la imagen.
        -Verexif: Elimina los metadatos de la imagen.

CSS
    Cascading es el nombre del algoritmo que usa el borwser para aplicar los estilos.

Pseudoclases (:class): Define el estilo de un estado especial de un elemento.
Pseudoelementos (::element): Define el estilo de una parte específica de un elemento.

Regla de CSS.
    selector: Qué elemento se quiere modificar.
        { propiedad: valor de la propiedad }: Declaración de estilo.

Modelo de caja
    a) margin: Espacio externo.
    b) border: Define el espacio del elemento.
    c) padding: Espacio interno. Ayuda para posicionar un poco el contenido.
    d) content: Tiene un width (ancho) y un height (alto).
    Se recalcula con border-box solamente el padding y el border. El margin no.

    Dependiendo del position:
        a) top: Arriba.
        b) right: Derecha.
        c) left: Izquierda.
        d) bottom: Abajo.

Herencia
    Código CSS que se le hereda de un padre a un hijo.
    HTML tiene un tamaño de fuente definida en 16px.

    Valores de herencia
        1) inherit: Indica que debe heredar los valores de su elemento padre. Si el elemento padre no tiene definido dicho valor el navegador seguirá el DOM hasta que encuentre un elemento
        superior que lo contenga. En caso de no tener ningún elemento superior, se aplicara el valor por defecto.
        2) initial: Este valor pertenece a la especificación CSS3. Cuando aplicamos a una propiedad el valor initial,
        estamos dando el valor inicial y predefinido por el navegador en cuestión.
        3) upset: Combinación entre inherit y initial. Cuando utilizamos este valor en una propiedad, esta tratara de heredar
        el valor de su elemento padre si este está disponible. De no ser así, este valor colocará el valor initial.

Especificidad en selectores
    Orden de declaración
        a) Importancia
            1) Hoja de estilo del agente de usuario (estilos del navegador).
            2) Declaraciones normales en hojas de estilo de autor (el [file_name].css).
            3) Declaraciones importantes en hojas de estilo de auto (!important).

        b) Especificidad (izquierda es más importante - derecha menos importante)
            1) !important: 1,0,0,0,0.
            2) inline styles: 0,1,0,0,0.
            3) #id: 0,0,1,0,0.
            4) .class: 0,0,0,1,0.
            5) tag: 0,0,0,0,1.

        c) Orden de las fuentes
            Las declaraciones al final del documento anularán a las que sucedan antes en caso de conflicto.

    Si dos declaraciones tienen la misma importancia, la especificidad es la encargada de decidir cuál aplicar.
    Si tienen la misma especificidad, el orden define los estilos.

    Conflicto de declaraciones
        Diferente de origen o !important
            Sí -> Utiliza la declaración con el origen de mayor prioridad.
            No -> Inline styles
                Sí -> Utiliza inline declarations.
                No -> Selectores con especificidad Diferente
                    Sí -> Utiliza las declaraciones de mayor especificidad.
                    No -> Utiliza las declaraciones que vienen en su fuente original.

Combinators
    Nos permiten combinar múltiples selectores y crear una mayor especificidad.
        1) Hermano adyacente o cercano (Adjacent Sibling): div + p.
        2) Hermano general (General Sibling): div ~ p.
        3) Hijo (Child): div > p.
        4) Descendiente (Descendant): div + p.

Medidas
    1) Relativas
        Medida que se ajusta a la pantalla al dispositivo en el que se visualiza el proyecto.
            a) em (element): Toma el tamaño de fuente del padre directo.
            b) rem (root element): Siempre va a tener referencia a la etiqueta root (HTML) o root del proyecto.
            Al poner un font-size de 62.5% en el root, hace que un 1rem sea igual a 10px.
            El font size del HTML es de 16px.
            c) porcentaje
            d) max-width/max-height
            c) min-width/min-height
            e) vw (viewport width)/vh (viewport height)
    2) Absolutas
        Medida que no cambia sin importar la pantalla del proyecto.
            a) Pixel

Position
    1) static: Default.
    2) absolute: Pierde la posición en la línea, y se puede mover encima de lo demás. Para poder manipularlo, toma de referencia
    el contenedor de posición relativa más cercana.
    3) relative: Se puede mover, pero no pierde su posición en la línea.
    4) fixed
    5) sticky

Display
    1) block: Default. Va a usar el 100% del width que tenga disponible, sin importar si el contenido tiene o no espacio.
    Se le puede agregar un margin en las cuatro posiciones. Se van apilando uno sobre otro.
    2) inline: Utiliza el espacio que tenga el contenido. Permite que otro contenido se ponga adelante.
    No se puede usar margin/padding-top/bottom, pero sí right-left. No se le puede dar width ni height.
    3) inline-block: Se le agrega margin, padding, width y height al display inline. Toma el espacio de su contenido, y permite
    otros elementos alineados si el espacio lo permite, sino, lo empuja hacía abajo.
    4) flex

Custom properties (variables)
    Almacenar un valor para poder reutilizar contenido.

Web fonts
    Generic-families
        1) serif
        2) sans-serif
        3) cursive
        4) monospace

Responsive Design
    Breakpoint: Dimensión en el viewport en el que se va a generar el cambio (redimensionar o reacomodar los elementos).
    Mobile first/Only: Diseño pensado en escalar desde un dispositivo móvil a desktop.
    Una buena práctica, es ligar archivos .css por mediaquery.

Patrones de maquetación en Responsive Design
    Mostly Fluid: Empieza en columna, y se van reacomodando los contenedores mientras va creciendo la pantalla.
    Layout Shifter: Comienza en columnas, y hay contenedores dentro de otros contenedores padre que se van reposicionando.
    Column Drop: Empieza en vertical, y se van reposicionando los de abajo.

Imágenes Responsive
    Una buena práctica, es usar la etiqueta picture + source con mediaqueries.
    La etiqueta con el viewport más largo, tiene que ir primero, y en orden decreciente.


